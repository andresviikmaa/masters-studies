<html>

<head>
<title>Image clustering using PCA and K-means clustering</title>

<style>
.rimage {
  float: left;
}
p, .chunk,h2, .rcode {
  clear:both;
}
article {
  max-width: 1024px;
  margin: 0 auto;
}
</style>
</head>

<body>
<article>
<section>
<h1>Clustering with PCA and K-means</h1>
<p>PCA is widely used in pattern detection (for example face detection). In this project we use PCA to detect patterns in image and use k-means clustering to find similar regions. 
</p>
<h2>Image processing in R</h2>
<p>To process the image we must fist load it ... </p>
<!--begin.rcode  load-image, message=FALSE,
par(mfrow=c(1,1))
library("jpeg")
image = readJPEG("forest.jpg")
par(mfcol=c(1,1), mar=c(0,0,2,0))
plot.new()
rasterImage(image, 0, 0, 1, 1, interpolate = FALSE)
end.rcode-->
<p>
... and convert into suitable format for clustering.
</p>
<!--begin.rcode convert-image
data = data.frame(list(r = c(image[,,1]), g = c(image[,,2]), b = c(image[,,3])))
head(data)
end.rcode-->

</section>
<section>
<h2>Finding initial cluster centers</h2>
<p>In order to do K-means clustering we need to specify the number of clusters and the initial cluster centers. As it is hard to detect the number of patterns and the inital patern configuations, we use simple colorspace clustering to form initial clusters.
</p>
<p>For this we can use R's built-in kmeans algorithm. We will visualize 9 cluster configurations, starting with two clusters and ending with 10 clusters
</p>
<!--begin.rcode colorspace-clustering-loop
for(k in 2:10) {
  # lets do clustering
  result = kmeans(data, k)
  # restore image
  rimage = array(NA, dim=c(dim(image)[1], dim(image)[2], 3))
  dim(rimage)
  rimage[,,1] = result$centers[result$cluster, 1]
  rimage[,,2] = result$centers[result$cluster, 2]
  rimage[,,3] = result$centers[result$cluster, 3]
  plot.new()
  rasterImage(rimage, 0, 0, 1, 1, interpolate = FALSE)  
  mtext(paste("Number of clusters:", k))
}

end.rcode-->
<p>Clustering with six clusters seems to bring out all distinct areas, so lets choose this as the cluster count and do clustering on this setup again and compare it with original.
</p>

<!--begin.rcode colorspace-clustering, fig.width=14, fig.height=6
k = 6
result = kmeans(data, k)
  
rimage = array(NA, dim=c(dim(image)[1], dim(image)[2], 3))
rimage[,,1] = result$centers[result$cluster, 1]
rimage[,,2] = result$centers[result$cluster, 2]
rimage[,,3] = result$centers[result$cluster, 3]

par(mfrow=c(1,2))
plot.new()
rasterImage(rimage, 0, 0, 1, 1, interpolate = FALSE)  
mtext(paste("Number of clusters:", k))

plot.new()
rasterImage(image, 0, 0, 1, 1, interpolate = FALSE)
mtext(paste("Original image"))

end.rcode-->
<p>Print out the cluster centers
</p>
Below graph shows the distinct colors (cluster centers) 
<!--begin.rcode cluster-colors
par(mfrow=c(1,1))
counts <- rep(1, k)
barplot(counts, main="Cluster colors", 
        col=rgb(result$centers[,1],result$centers[,2],result$centers[,3]))
end.rcode-->
<h2>Image processing vol. 2</h2>
<p>In order to do clustering based on patterns in image, we will divide image into regions (16 by 16 pixel blocks) and treat each block as pattern. 
<!--begin.rcode block-15
blocks.size = 16
blocks.dim = dim(image)[1:2] / blocks.size

blocks = matrix(NA, ncol=3*blocks.size**2, nrow=blocks.dim[1]*blocks.dim[2])
for (i in 1:(blocks.dim[1])) {
  for (j in 1:(blocks.dim[2])) {
    RGB = image[((i-1)*blocks.size+1):(i*blocks.size), ((j-1)*blocks.size+1):(j*blocks.size), ]
    blocks[(i-1)*blocks.dim[2]+j, ] = RGB
  }  
}
end.rcode-->
<p>In above code we defined following variables for later use
<ul>
<li>blocks.size - block size in pixels (16 in our case)
<li>blocks.dim - number of blocks in image (x, y)
<li>blocks - array of blocks [block index][pixel index]
</ul>
<!--begin.rcode blocks-dimensions
blocks.size
blocks.dim
dim(blocks)
end.rcode-->
</p>
<p>First lets verify that we are able to restore image. For this lets define helper function that plots the image from our array format.</p>
<!--begin.rcode blocks-plot
blocks.plot <- function (blocks, title) {
  rimage <- array(0, dim=c(blocks.dim[1]*blocks.size, blocks.dim[2]*blocks.size,3))
  for(i in 1:blocks.dim[1]){
    for(j in 1:blocks.dim[2]){
      rimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size), ] <- 
        blocks[(i-1)*blocks.dim[2] + j, ]
    }
  }
  plot.new()
  rasterImage(rimage, 0, 0, 1, 1, interpolate = FALSE)  
  mtext(paste(title))
}

blocks.plot(blocks, "restored image")
end.rcode-->
<p>Lets define another helper function to normalize color values after pca.</p>
<!--begin.rcode range01
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
end.rcode-->
<p>Now that we have our image divided into blocks we can use our inital color-based clustering results to assign each block into cluster by dominant color in it</p>
<!--begin.rcode initial-clustering-calc
# block -> cluster index maping
z <- rep(-1, blocks.dim[1] * blocks.dim[2])

# cluster indexes for each pixel
zimage = result$cluster
dim(zimage) <- c(dim(image)[1], nrow= dim(image)[2])

# find dominant pixel for each block
for(i in 1:blocks.dim[1]){
  for(j in 1:blocks.dim[2]){
    pixels <- zimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size)]
    mode = pixels[which.max(tabulate(match(pixels,1:4)))] # mode function
    z[(i-1) * blocks.dim[2] + j] <- mode
  }
}

end.rcode-->
Below graph shows the initial block clustering based of colorspace.
<!--begin.rcode initial-clustering-plot
bimage <- array(0, dim=c(blocks.dim[1]*blocks.size, blocks.dim[2]*blocks.size,3))
dim(rimage)
for(i in 1:blocks.dim[1]){
  for(j in 1:blocks.dim[2]){
    bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),1] <- 
      rep(result$centers[z[(i-1) * blocks.dim[2] + j],1], blocks.size**2)
    bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),2] <- 
      rep(result$centers[z[(i-1) * blocks.dim[2] + j],2], blocks.size**2)
    bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),2] <- 
      rep(result$centers[z[(i-1) * blocks.dim[2] + j],3], blocks.size**2)
  }
}
plot.new()
rasterImage(bimage, 0, 0, 1, 1)  
mtext(paste("Initial clustering"))

end.rcode-->
<h3>PCA</h3>
<p>Next we will perform principal component analysis on each cluster, visualize first 16 components and store them in <code>pca.vectors</code> variable for later use. </p>
<!--begin.rcode pca-vectors
  errors <- c()
  pca.vectors = array(NaN, dim=c(k, ncol(blocks), 16))

  old.par <- par(mfrow=c(4,4), mar = c(0, 0, 0, 0), oma = c(2, 2, 2, 2))
  # foreach cluster lets calculate 16 PCA components
  for(i in seq_len(k))
  {
    # covariance matrix
    Sigma <- t(blocks[z == i, ]) %*% blocks[z == i, ] 
    W <- eigen(Sigma)
    # store vectors for future use
    pca.vectors[i,,]  = W$vectors[,1:16]

    # visualize first 16 components
    for(j in 1:16){
      block = W$values[j] %*% t(W$vectors[,j])
      block = range01(block)
      dim(block) <- c(16,16,3)
      plot.new()
      rasterImage(block, 0, 0, 1, 1)  
    }  
    mtext(paste("cluster ",i," components, iteration =", 1), outer=TRUE)
  }
  par(old.par)

end.rcode-->
<p>Next we find out how well we can restore each block from each cluster.</p>
<!--begin.rcode pca-masks
  blocks.masks = array(NaN, dim=c(k, nrow(blocks), ncol(blocks)))
  
  for(i in seq_len(k))
  {
    for (a in 1:nrow(blocks)) {
      weights = t(pca.vectors[i,,]) %*% blocks[a,]
      mask = pca.vectors[i,,] %*% weights
      blocks.masks[i,a, ] = mask
    }
  }
end.rcode-->
<p>Below are the results after reconstructing blocks from individual cluster components.</p>
<!--begin.rcode pca-restore-each, fig.width=14, fig.height=6
  par.old = par(mfrow=c(1,2))
  for(i in seq_len(k))
  {
    blocks.plot(range01(blocks.masks[i,, ]), paste("Restored image from cluster ",i,", iteration =", 1))
    blocks.plot(range01(abs(blocks - blocks.masks[i,, ])), paste("Errors from cluster ",i,", iteration =", 1))
  }
  par(par.old)
end.rcode-->
<p>Next we find out the cluster that has minimal reconstruction error for each block ...
</p>
<!--begin.rcode pca-errors
  # calculate errors
  blocks.errors <- matrix(NA, nrow(blocks), k)
  for(i in seq_len(k))
  {
    for (a in 1:nrow(blocks)) {
      blocks.errors[a, i] <- mean((blocks[a,] - blocks.masks[i,a, ])**2)
    }
  }

end.rcode-->
<p>... and assign block into that cluster.</p>
<!--begin.rcode pca-relabel
  # select cluster with smaller error
  z.new <- apply(blocks.errors, 1, which.min)

end.rcode-->
<p>Now that we have re-assigned our blocks into clusters we can reconstruct image and compare it to origina.
</p>
<!--begin.rcode restore-image, fig.width=14, fig.height=6
  par.old = par(mfrow=c(1,2))
  # restore image from best cluster
  composite = matrix(NA, ncol=3*blocks.size**2, nrow=blocks.dim[1]*blocks.dim[2])

  for (a in 1:nrow(blocks)) {
    composite[a,] = blocks.masks[z.new[a],a, ]
  }
  blocks.plot(range01(composite), paste("Restored image, iteration =", 1))   
  blocks.plot(range01(abs(blocks - composite)), paste("Restored image error, iteration =", 1))
  par(par.old)
end.rcode-->

<p>Lets save overall mean square error for later ploting</p>
<!--begin.rcode error
  #overall error
  errors <- c(errors, mean((blocks - composite)**2))
end.rcode-->

<p>And we can continue with second iteration until clustering converges</p>
<!--begin.rcode iteration-2
  z = z.new

  #plot inital clustering of blocks
  bimage <- array(0, dim=c(blocks.dim[1]*blocks.size, blocks.dim[2]*blocks.size,3))
  dim(rimage)
  for(i in 1:blocks.dim[1]){
    for(j in 1:blocks.dim[2]){
      bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),1] <- 
        rep(result$centers[z[(i-1) * blocks.dim[2] + j],1], blocks.size**2)
      bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),2] <- 
        rep(result$centers[z[(i-1) * blocks.dim[2] + j],2], blocks.size**2)
      bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),2] <- 
        rep(result$centers[z[(i-1) * blocks.dim[2] + j],3], blocks.size**2)
    }
  }
  plot.new()
  rasterImage(bimage, 0, 0, 1, 1)  
  mtext(paste("Initial clustering"))

for (m in 2:10) {
  
  pca.vectors = array(NaN, dim=c(k, ncol(blocks), 16))

  old.par <- par(mfrow=c(4,4), mar = c(0, 0, 0, 0), oma = c(0, 0, 2, 0))
  # 
  for(i in seq_len(k))
  {
    # covariance matrix
    Sigma <- t(blocks[z == i, ]) %*% blocks[z == i, ] # cov(blocks[z == i,]) 
    # Use eigenvector decomposition to find the directions
    W <- eigen(Sigma)
    pca.vectors[i,,]  = W$vectors[,1:16]

    for(j in 1:16){
      block = W$values[j] %*% t(W$vectors[,j])
      block = range01(block)
      dim(block) <- c(16,16,3)
      plot.new()
      rasterImage(block, 0, 0, 1, 1)  
    }  
    mtext(paste("cluster ",i," components, iteration =", 1), outer=TRUE)
  }
  par(old.par)
  
  # restore each block by all cluster components
  blocks.masks = array(NaN, dim=c(k, nrow(blocks), ncol(blocks)))
  
  for(i in seq_len(k))
  {
    for (a in 1:nrow(blocks)) {
      weights = t(pca.vectors[i,,]) %*% blocks[a,]
      mask = pca.vectors[i,,] %*% weights
      blocks.masks[i,a, ] = mask
    }
    blocks.plot(range01(blocks.masks[i,, ]), paste("Restored image from cluster ",i,", iteration =", m))
    blocks.plot(range01(abs(blocks - blocks.masks[i,, ])), paste("Errors from cluster ",i,", iteration =", m))
  }

  
  # calculate errors
  blocks.errors <- matrix(NA, nrow(blocks), k)
  for(i in seq_len(k))
  {
    for (a in 1:nrow(blocks)) {
      blocks.errors[a, i] <- mean((blocks[a,] - blocks.masks[i,a, ])**2)
    }
  }
  
  # select cluster with smaller error
  z.new <- apply(blocks.errors, 1, which.min)

  # restore image from best cluster
  composite = matrix(NA, ncol=3*blocks.size**2, nrow=blocks.dim[1]*blocks.dim[2])
  dim(composite)
  for (a in 1:nrow(blocks)) {
    composite[a,] = blocks.masks[z.new[a],a, ]
  }
  blocks.plot(range01(composite), paste("Restored image, iteration =", m))   
  blocks.plot(range01(abs(blocks - composite)), paste("Restored image error, iteration =", m))

  #overall error
  errors <- c(errors, mean((blocks - composite)**2))
  plot(errors, type = "l", lwd = 1, xlab = "", ylab = "", main = "MSE")
  points(errors, pch = 16, col = c("blue", "red"))
  

  bimage <- array(0, dim=c(blocks.dim[1]*blocks.size, blocks.dim[2]*blocks.size,3))
  dim(rimage)
  for(i in 1:blocks.dim[1]){
    for(j in 1:blocks.dim[2]){
      bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),1] <- 
        rep(result$centers[z[(i-1) * blocks.dim[2] + j],1], blocks.size**2)
      bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),2] <- 
        rep(result$centers[z[(i-1) * blocks.dim[2] + j],2], blocks.size**2)
      bimage[(blocks.size*(i-1) + 1:blocks.size),(blocks.size*(j-1) + 1:blocks.size),2] <- 
        rep(result$centers[z[(i-1) * blocks.dim[2] + j],3], blocks.size**2)
    }
  }
  plot.new()
  rasterImage(bimage, 0, 0, 1, 1)  
  mtext(paste("Clustered blocks, iteration =", m))
  
  if (all(z==z.new)){
    break
  }
  # repeat
  z = z.new
  
}

end.rcode-->
</article>
</body>
</html>
